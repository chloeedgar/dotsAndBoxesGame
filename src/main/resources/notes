Notes:
- 2 player game (constant)
- Grid size should be variable, but start with 4x4
- Player 1 always goes first




1. Decide on file structure

Layered Architecture (MVC) for a  structured and extensible design

 src/
 ├── controller/
 │   ├── GameController.java  // Coordinates game flow, user inputs, and rendering
 │
 ├── model/
 │   ├── GameState.java       // Manages board state and scores
 │   ├── Player.java          // Represents a player
 │   ├── Move.java            // Encapsulates move details
 │
 ├── view/
 │   ├── GameView.java        // Displays the board and prompts input
 │   ├── ConsoleView.java     // Console-specific rendering (extensible for GUI later)
 │
 └── Main.java                // Initializes and runs the game

  - MVC organisation simplifies maintainence
  - Easier to expand (.e.g. GUI or additional game modes)


2. Decide on unit tests that need written
3. Write unit tests

4. Iterative Agile Approach

Sprint 1: Foundation and Basic Flow
Deliverable: A simple game loop with minimal functionality, board initialization, and user moves.

Sprint 2: Validations and Rules
Deliverable: Users can only make valid moves. Moves are tracked on the board.
Deliverable: Users can make move & gets displayed in correct position


Board Initialization:
4 x 4 grid of dots
    = 7 letters along the top ((4 x 2)-1)
    = 7 numbers along LHS ((4 x 2)-1)
space on every other horizontal line ((4 x 2)-1 -1
    same as for along the top but minus an extra 1 for the first letter

    first line is alpahbet
    every other line (... .size%1=0 is stars)
    every other line is a spacce
